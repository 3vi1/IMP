/*
 * Imp:  Copyright 2016, 2017 Jesse Litton (imp@eternaldusk.com)
 *
 * This file is part of Imp.
 *
 * Imp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Imp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Imp.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * This file defines a map - usually representing a specific region.
 *
 * Emits generated by the map loading are caught by the SvgMapView, where
 * they are converted into view items.
 *
 * This is still not completely converted from the WebKit/WebEngine version,
 * which required that I modify all the code in place.  If you're wondering
 * why I'm doing something "the hard way", it's probably because I wrote
 * it before moving to QGraphicsSvgView.
 *
 */

#ifndef MAP_H
#define MAP_H

#include <QColor>
#include <QDateTime>
#include <QObject>
#include <QFile>
#include <QList>
#include <QMap>
#include <QPointF>
#include <QString>
#include <QTimer>
#include <QtXml/QDomDocument>

enum SystemStatus { no_info, clear, red };

struct System
{
    QString id;                     // Numeric ID for this system
    QPoint coords;
    QString text;
    QString description;
    QString type;
    bool hasIce = false;
    QList<QString> connected;
    QMap<QString, int> distance;
};

struct Active
{
    QDateTime dateTime;
    SystemStatus status;
};

struct HopCounter
{
    QString name;
    int jumps;
};

class Map : public QObject
{
    Q_OBJECT

public:
    explicit Map(QObject *parent = 0);

    void computeDistancesFrom(const QString& from);
    bool contains(const QString& systemName);
    int distanceBetween(const QString& pilotLoc, const QString& system);

    QPoint getCoordinates(const QString& systemName);
    QString getIdBySystem(const QString& system);
    QString getSystemById(const QString& id);
    QString getSystemByAbbreviation(const QString& word);
    QStringList getSystemNames();

    bool isAPilotIn(const QString& systemName);

    void loadXml(const QString &filename);
    void loadXml(QFile& file);

    QStringList ourCurrentPilots() {return m_pilotSystem.keys();}
    QMap<QString, QString> pilotsAndLocation(){return m_pilotSystem;}
    QStringList pilotsIn(const QString& systemName);
    QString pilotsSystem(QString pilotName){return m_pilotSystem[pilotName];}

    void setPilotLocation(const QString &pilotName, const QString& system);
    void setRefresh(int msecs);
    void setSystemStatus(const QString& system,
                         SystemStatus status,
                         QDateTime& dateTime,
                         bool emitChange=false);

    void startUpdates();
    void update();

signals:
    void lineAdded(qreal x1, qreal x2, qreal y1, qreal y2, const QString& connectionClass);
    void newPilot(const QString& pilotName);
    void pilotLocationChange(const QString& pilot, const QString& system);
    void systemAdded(const QString& name, QPointF position, const QString& systemClass,
                     const QString& description);
    void systemColorUpdated(const QString& name, QColor color);
    void systemPosition(const QString& name, QPointF position);
    void systemTimeUpdated(const QString& name,
                       const QString& text,
                       QColor color);

public slots:
    void updateActiveSystems();

private:
    void doSymbol(const QDomNode& node);
    void processNode(const QDomNode& inNode);
    void updateSystem(QString system);

    QMap<QString, Active>       m_activeSystems;
    QDomDocument                m_domDoc;
    QMap<QString, QString>      m_idToNameMap;
    QMap<QString, QPoint>       m_location;            // Numeric ID, x/y
    QMap<QString, QString>      m_pilotSystem;         // PilotName, SystemName
    QMap<QString, System>       m_systemMap;
    QTimer*                     m_timer;
};

#endif // MAP_H
